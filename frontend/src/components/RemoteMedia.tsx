import React, { useEffect, useRef, useState } from 'react';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–æ–≤ (–≤–∏–¥–µ–æ, –∞—É–¥–∏–æ).
 * @param props.remoteStreams - –º–∞—Å—Å–∏–≤ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
 */
interface RemoteStream {
    id: string;
    kind: 'audio' | 'video';
    stream: MediaStream;
}

interface RemoteMediaProps {
    remoteStreams: RemoteStream[];
}

export const RemoteMedia: React.FC<RemoteMediaProps> = ({ remoteStreams }) => {
    // refs –¥–ª—è –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const remoteVideoRefs = useRef<{ [id: string]: HTMLVideoElement | null }>({});
    const remoteAudioRefs = useRef<{ [id: string]: HTMLAudioElement | null }>({});
    
    // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é
    const [videosNeedingPlay, setVideosNeedingPlay] = useState<Set<string>>(new Set());

    // ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
    useEffect(() => {
        console.log('üì∫ RemoteMedia: streams updated', {
            total: remoteStreams.length,
            video: remoteStreams.filter(s => s.kind === 'video').length,
            audio: remoteStreams.filter(s => s.kind === 'audio').length,
            streams: remoteStreams.map(s => ({ id: s.id, kind: s.kind, tracks: s.stream.getTracks().length }))
        });
    }, [remoteStreams]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ srcObject –¥–ª—è remote video/audio
    useEffect(() => {
        remoteStreams.forEach((remote) => {
            if (remote.kind === 'video' && remoteVideoRefs.current[remote.id]) {
                console.log('üé• Setting video srcObject for:', remote.id, remote.stream);
                
                // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏ –≤ stream
                const videoTracks = remote.stream.getVideoTracks();
                console.log('üé¨ Video tracks in stream:', {
                    count: videoTracks.length,
                    tracks: videoTracks.map(track => ({
                        id: track.id,
                        kind: track.kind,
                        enabled: track.enabled,
                        readyState: track.readyState,
                        settings: track.getSettings()
                    }))
                });
                
                remoteVideoRefs.current[remote.id]!.srcObject = remote.stream;
                
                // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ video —ç–ª–µ–º–µ–Ω—Ç–∞
                const videoEl = remoteVideoRefs.current[remote.id]!;
                videoEl.onloadedmetadata = () => {
                    console.log('üì∫ Video metadata loaded:', remote.id, {
                        videoWidth: videoEl.videoWidth,
                        videoHeight: videoEl.videoHeight,
                        duration: videoEl.duration
                    });
                    
                    // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–∏–¥–µ–æ
                    videoEl.play().then(() => {
                        console.log('‚ñ∂Ô∏è Video play() successful:', remote.id);
                    }).catch((error) => {
                        console.log('‚ùå Video play() failed:', remote.id, error);
                        // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
                        setVideosNeedingPlay(prev => new Set(prev).add(remote.id));
                    });
                };
                
                videoEl.onplay = () => {
                    console.log('‚ñ∂Ô∏è Video started playing:', remote.id);
                };
                
                videoEl.onerror = (error) => {
                    console.log('‚ùå Video error:', remote.id, error);
                };
            }
            if (remote.kind === 'audio' && remoteAudioRefs.current[remote.id]) {
                console.log('üîä Setting audio srcObject for:', remote.id, remote.stream);
                remoteAudioRefs.current[remote.id]!.srcObject = remote.stream;
            }
        });
    }, [remoteStreams]);

    // ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ
    const playVideo = (streamId: string) => {
        const videoEl = remoteVideoRefs.current[streamId];
        if (videoEl) {
            videoEl.play().then(() => {
                console.log('‚ñ∂Ô∏è Manual video play successful:', streamId);
                setVideosNeedingPlay(prev => {
                    const newSet = new Set(prev);
                    newSet.delete(streamId);
                    return newSet;
                });
            }).catch((error) => {
                console.log('‚ùå Manual video play failed:', streamId, error);
            });
        }
    };

    if (remoteStreams.length === 0) {
        return (
            <div style={{ marginTop: 32 }}>
                <h4>Remote Media</h4>
                <div style={{ color: '#666', padding: 20 }}>–ù–µ—Ç —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤</div>
            </div>
        );
    }

    return (
        <div style={{ marginTop: 32 }}>
            <h4>Remote Media ({remoteStreams.length} –ø–æ—Ç–æ–∫–æ–≤)</h4>
            {remoteStreams.map(remote =>
                remote.kind === 'video' ? (
                    <div key={remote.id} style={{ marginBottom: 16 }}>
                        <div style={{ fontSize: '12px', color: '#666', marginBottom: 4 }}>
                            Video stream: {remote.id.substring(0, 8)}...
                        </div>
                        <div style={{ position: 'relative', display: 'inline-block' }}>
                            <video
                                ref={el => (remoteVideoRefs.current[remote.id] = el)}
                                autoPlay
                                playsInline
                                muted
                                style={{ width: 320, marginRight: 16, border: '2px solid #2196f3' }}
                            />
                            {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ Play –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä—É—á–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ */}
                            {videosNeedingPlay.has(remote.id) && (
                                <button
                                    onClick={() => playVideo(remote.id)}
                                    style={{
                                        position: 'absolute',
                                        top: '50%',
                                        left: '50%',
                                        transform: 'translate(-50%, -50%)',
                                        backgroundColor: 'rgba(0,0,0,0.7)',
                                        color: 'white',
                                        border: 'none',
                                        borderRadius: '50%',
                                        width: 60,
                                        height: 60,
                                        fontSize: '24px',
                                        cursor: 'pointer',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center'
                                    }}
                                >
                                    ‚ñ∂Ô∏è
                                </button>
                            )}
                        </div>
                    </div>
                ) : (
                    <div key={remote.id} style={{ marginBottom: 16 }}>
                        <div style={{ fontSize: '12px', color: '#666', marginBottom: 4 }}>
                            Audio stream: {remote.id.substring(0, 8)}...
                        </div>
                        <audio
                            ref={el => (remoteAudioRefs.current[remote.id] = el)}
                            autoPlay
                            controls
                            style={{ marginRight: 16 }}
                        />
                    </div>
                )
            )}
        </div>
    );
}; 