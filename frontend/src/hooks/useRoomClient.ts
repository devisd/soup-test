import { useEffect, useRef, useState, useCallback } from 'react';
import { io, Socket } from 'socket.io-client';
import type { Socket as SocketType } from 'socket.io-client';
import type { Device } from 'mediasoup-client';
import * as mediasoupClient from 'mediasoup-client';
type Transport = InstanceType<typeof mediasoupClient.types.Transport>;
type Producer = InstanceType<typeof mediasoupClient.types.Producer>;
type Consumer = InstanceType<typeof mediasoupClient.types.Consumer>;

export type MediaType = 'audio' | 'video' | 'screen';

export interface RoomClientOptions {
    roomId: string;
    userName: string;
    localVideoRef?: React.RefObject<HTMLVideoElement>;
    localScreenRef?: React.RefObject<HTMLVideoElement>;
}

export interface RoomClientState {
    joined: boolean;
    error?: string;
    deviceReady?: boolean;
    transportsReady?: boolean;
    audioActive?: boolean;
    videoActive?: boolean;
    screenActive?: boolean;
    // TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è remote media
}

// –¢–∏–ø—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
interface ServerResponse<T = any> {
    error?: string;
    [key: string]: any;
}

interface RemoteStream {
    id: string;
    kind: 'audio' | 'video';
    stream: MediaStream;
}

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–æ–π, –º–µ–¥–∏–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–µ—Ä–µ–∑ mediasoup –∏ socket.io.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –º–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞, —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ remote media.
 */
export function useRoomClient({ roomId, userName, localVideoRef, localScreenRef }: RoomClientOptions) {
    const [state, setState] = useState<RoomClientState>({ joined: false });
    const [remoteStreams, setRemoteStreams] = useState<RemoteStream[]>([]);
    const [participants, setParticipants] = useState<string[]>([]);
    const socketRef = useRef<SocketType | null>(null);
    const deviceRef = useRef<Device | null>(null);
    const producerTransportRef = useRef<Transport | null>(null);
    const consumerTransportRef = useRef<Transport | null>(null);
    const producersRef = useRef<{ [key in MediaType]?: Producer }>({});
    const consumersRef = useRef<{ [id: string]: Consumer }>({});
    const joinedRef = useRef(false);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ socket.io
    useEffect(() => {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket.io —á–µ—Ä–µ–∑ nginx proxy, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ polling
        console.log('üîå Connecting to Socket.IO server...');
        let socket = io('https://rifelli.ru', {
            path: '/video-api/socket.io/',  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
            forceNew: true,
            timeout: 20000,
            transports: ['polling'], // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ polling –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            autoConnect: true,
        });
        
        socket.on('connect', () => {
            console.log('‚úÖ Socket connected successfully, ID:', socket.id);
        });
        
        socket.on('disconnect', (reason) => {
            console.log('‚ùå Socket disconnected, reason:', reason);
        });
        
        socket.on('connect_error', (error) => {
            console.log('‚ùå Socket connection error:', error);
        });
        
        socketRef.current = socket;
        return () => {
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
            console.log('üîå Disconnecting socket...');
            socket.disconnect();
        };
    }, [roomId, userName]);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –≤—Ö–æ–¥
    const joinRoom = useCallback(() => {
        const socket = socketRef.current;
        if (!socket) {
            console.log('‚ùå No socket available');
            return;
        }
        if (joinedRef.current) {
            console.log('‚ö†Ô∏è Already joined');
            return;
        }
        
        console.log('üîÑ Socket connected:', socket.connected);
        joinedRef.current = true;

        console.log('üìû Creating room:', roomId);
        // 1. –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        socket.emit('createRoom', { room_id: roomId }, (response: ServerResponse) => {
            console.log('üè† Create room response:', response);
            
            // 2. –í–æ–π—Ç–∏ –≤ –∫–æ–º–Ω–∞—Ç—É
            console.log('üö™ Joining room:', roomId, 'as user:', userName);
            socket.emit('join', { room_id: roomId, name: userName }, async (joinResp: ServerResponse) => {
                console.log('‚úÖ Join response:', joinResp);
                
                if (joinResp.error) {
                    console.log('‚ùå Join error:', joinResp.error);
                    setState(s => ({ ...s, error: joinResp.error }));
                    return;
                }
                setState(s => ({ ...s, joined: true, error: undefined }));
                
                // 3. –ü–æ–ª—É—á–∏—Ç—å rtpCapabilities –∏ —Å–æ–∑–¥–∞—Ç—å Device
                console.log('üîß Getting RTP capabilities...');
                try {
                    socket.emit('getRouterRtpCapabilities', {}, async (rtpCapabilities: any) => {
                        console.log('üì° RTP Capabilities received:', rtpCapabilities);
                        
                        try {
                            console.log('üéõÔ∏è Creating mediasoup device...');
                            const device = new mediasoupClient.Device();
                            await device.load({ routerRtpCapabilities: rtpCapabilities });
                            deviceRef.current = device;
                            console.log('‚úÖ Device created successfully');
                            setState(s => ({ ...s, deviceReady: true }));
                        } catch (err) {
                            console.log('‚ùå Mediasoup device error:', err);
                            setState(s => ({ ...s, error: 'Mediasoup device error: ' + (err instanceof Error ? err.message : String(err)) }));
                        }
                    });
                } catch (err) {
                    console.log('‚ùå Failed to get RTP Capabilities:', err);
                    setState(s => ({ ...s, error: 'Failed to get RTP Capabilities' }));
                }
            });
        });
    }, [roomId, userName, state.joined]);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º joinedRef –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–Ω–∞—Ç—ã/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    useEffect(() => {
        joinedRef.current = false;
    }, [roomId, userName]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    useEffect(() => {
        const socket = socketRef.current;
        if (!socket) return;
        const updateParticipants = () => {
            socket.emit('getMyRoomInfo', {}, (info: any) => {
                try {
                    const peers = info && info.peers ? JSON.parse(info.peers) : [];
                    setParticipants(peers.map(([, peer]: [string, any]) => peer.name));
                } catch {
                    setParticipants([]);
                }
            });
        };
        socket.on('newProducers', updateParticipants);
        socket.on('disconnect', () => setParticipants([]));
        updateParticipants();
        return () => {
            socket.off('newProducers', updateParticipants);
            socket.off('disconnect', () => setParticipants([]));
        };
    }, [state.joined]);

    // –°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ deviceReady
    const startTransports = useCallback(() => {
        const socket = socketRef.current;
        const device = deviceRef.current;
        if (!socket || !device) {
            console.log('‚ùå No socket or device for transports');
            return;
        }

        console.log('üöõ Creating producer transport...');
        // Producer Transport
        socket.emit('createWebRtcTransport', { forceTcp: false, rtpCapabilities: device.rtpCapabilities }, (data: any) => {
            console.log('üì§ Producer transport response:', data);
            
            if (data.error) {
                console.log('‚ùå Producer transport error:', data.error);
                setState(s => ({ ...s, error: 'Producer transport error: ' + data.error }));
                return;
            }
            const producerTransport = device.createSendTransport(data);
            producerTransportRef.current = producerTransport;
            console.log('‚úÖ Producer transport created');

            producerTransport.on('connect', ({ dtlsParameters }, callback, errback) => {
                console.log('üîó Producer transport connecting...');
                socket.emit('connectTransport', { dtlsParameters, transport_id: data.id }, (response: any) => {
                    if (response && response.error) {
                        console.log('‚ùå Producer transport connect error:', response.error);
                        errback(response.error);
                    } else {
                        console.log('‚úÖ Producer transport connected');
                        callback();
                    }
                });
            });

            producerTransport.on('produce', async ({ kind, rtpParameters }, callback, errback) => {
                console.log('üé§ Producing media:', kind);
                try {
                    socket.emit('produce', {
                        producerTransportId: producerTransport.id,
                        kind,
                        rtpParameters,
                    }, (response: any) => {
                        if (response && response.error) {
                            console.log('‚ùå Produce error:', response.error);
                            errback(response.error);
                        } else {
                            console.log('‚úÖ Produce success, producer_id:', response.producer_id);
                            callback({ id: response.producer_id });
                        }
                    });
                } catch (err) {
                    console.log('‚ùå Produce exception:', err);
                    errback(err);
                }
            });

            producerTransport.on('connectionstatechange', (state) => {
                console.log('üì§ Producer transport state:', state);
                if (state === 'failed') {
                    producerTransport.close();
                }
            });

            console.log('üöõ Creating consumer transport...');
            // Consumer Transport
            socket.emit('createWebRtcTransport', { forceTcp: false }, (data2: any) => {
                console.log('üì• Consumer transport response:', data2);
                
                if (data2.error) {
                    console.log('‚ùå Consumer transport error:', data2.error);
                    setState(s => ({ ...s, error: 'Consumer transport error: ' + data2.error }));
                    return;
                }
                const consumerTransport = device.createRecvTransport(data2);
                consumerTransportRef.current = consumerTransport;
                console.log('‚úÖ Consumer transport created');

                consumerTransport.on('connect', ({ dtlsParameters }, callback, errback) => {
                    console.log('üîó Consumer transport connecting...');
                    socket.emit('connectTransport', { dtlsParameters, transport_id: data2.id }, (response: any) => {
                        if (response && response.error) {
                            console.log('‚ùå Consumer transport connect error:', response.error);
                            errback(response.error);
                        } else {
                            console.log('‚úÖ Consumer transport connected');
                            callback();
                        }
                    });
                });

                consumerTransport.on('connectionstatechange', (state) => {
                    console.log('üì• Consumer transport state:', state);
                    if (state === 'failed') {
                        consumerTransport.close();
                    }
                });

                console.log('üéâ All transports ready!');
                setState(s => ({ ...s, transportsReady: true }));
            });
        });
    }, []);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –ø–æ—Å–ª–µ deviceReady
    useEffect(() => {
        if (state.joined && state.deviceReady && !state.transportsReady) {
            startTransports();
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [state.joined, state.deviceReady]);

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –º–µ–¥–∏–∞
    const startMedia = useCallback(async (type: MediaType, deviceId?: string) => {
        console.log(`üé¨ Starting ${type} media...`);
        console.log('üìç Refs available:', { localVideoRef: !!localVideoRef?.current, localScreenRef: !!localScreenRef?.current }); // ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        
        const producerTransport = producerTransportRef.current;
        if (!producerTransport) {
            console.log('‚ùå No producer transport available');
            setState(s => ({ ...s, error: 'Producer transport not ready' }));
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã
        if (!state.transportsReady) {
            console.log('‚ùå Transports not ready yet');
            setState(s => ({ ...s, error: 'Transports not ready yet' }));
            return;
        }

        let constraints: MediaStreamConstraints;
        if (type === 'audio') {
            constraints = { audio: deviceId ? { deviceId } : true, video: false };
        } else if (type === 'video') {
            constraints = { audio: false, video: deviceId ? { deviceId } : { width: 640, height: 480 } };
        } else if (type === 'screen') {
            // –î–ª—è —ç–∫—Ä–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º getDisplayMedia
            try {
                console.log('üñ•Ô∏è Requesting screen share...');
                const stream = await (navigator.mediaDevices as any).getDisplayMedia({ 
                    video: true,
                    audio: false 
                });
                const track = stream.getVideoTracks()[0];
                
                console.log('üé¨ Screen track obtained, creating producer...');
                const producer = await producerTransport.produce({ track });
                producersRef.current[type] = producer;
                
                // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π screen video —ç–ª–µ–º–µ–Ω—Ç
                if (localScreenRef?.current) {
                    localScreenRef.current.srcObject = stream;
                    console.log('üì∫ Local screen srcObject set:', stream, localScreenRef.current); // ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
                } else {
                    console.log('‚ùå localScreenRef.current is null'); // ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ screen share
                track.addEventListener('ended', () => {
                    console.log('üõë Screen share ended by user');
                    stopMedia('screen');
                });
                
                setState(s => ({ ...s, screenActive: true, error: undefined }));
                console.log('‚úÖ Screen share started successfully');
                return;
            } catch (err) {
                console.log('‚ùå Screen share error:', err);
                setState(s => ({ ...s, error: 'Screen share error: ' + (err instanceof Error ? err.message : String(err)) }));
                return;
            }
        } else {
            return;
        }
        
        try {
            console.log(`üé• Requesting ${type} media with constraints:`, constraints);
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            const track = type === 'audio' ? stream.getAudioTracks()[0] : stream.getVideoTracks()[0];
            
            if (!track) {
                throw new Error(`No ${type} track found`);
            }
            
            console.log(`üé¨ ${type} track obtained, creating producer...`);
            const producer = await producerTransport.produce({ track });
            producersRef.current[type] = producer;
            
            // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stream –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π video —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–∏–¥–µ–æ
            if (type === 'video' && localVideoRef?.current) {
                localVideoRef.current.srcObject = stream;
                console.log('üì∫ Local video srcObject set:', stream, localVideoRef.current); // ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
            } else if (type === 'video') {
                console.log('‚ùå localVideoRef.current is null'); // ‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
            }
            
            setState(s => ({
                ...s,
                audioActive: type === 'audio' ? true : s.audioActive,
                videoActive: type === 'video' ? true : s.videoActive,
                error: undefined
            }));
            
            console.log(`‚úÖ ${type} media started successfully`);
        } catch (err) {
            console.log(`‚ùå ${type} media error:`, err);
            setState(s => ({ ...s, error: `${type} error: ` + (err instanceof Error ? err.message : String(err)) }));
        }
    }, [state.transportsReady, localVideoRef, localScreenRef]);

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–¥–∏–∞
    const stopMedia = useCallback((type: MediaType) => {
        const producer = producersRef.current[type];
        if (producer) {
            console.log(`üõë Stopping ${type} media, producer_id:`, producer.id);
            
            // ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ producer
            const socket = socketRef.current;
            if (socket) {
                socket.emit('producerClosed', { producer_id: producer.id });
            }
            
            producer.close();
            delete producersRef.current[type];
            
            // ‚úÖ –û—á–∏—â–∞–µ–º video —ç–ª–µ–º–µ–Ω—Ç—ã
            if (type === 'video' && localVideoRef?.current) {
                localVideoRef.current.srcObject = null;
            }
            if (type === 'screen' && localScreenRef?.current) {
                localScreenRef.current.srcObject = null;
            }
            
            setState(s => ({
                ...s,
                audioActive: type === 'audio' ? false : s.audioActive,
                videoActive: type === 'video' ? false : s.videoActive,
                screenActive: type === 'screen' ? false : s.screenActive,
            }));
        }
    }, [localVideoRef, localScreenRef]);

    // --- Remote media: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤ –∏ consume ---
    useEffect(() => {
        const socket = socketRef.current;
        const device = deviceRef.current;
        const consumerTransport = consumerTransportRef.current;
        if (!socket || !device || !consumerTransport) return;

        // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        console.log('üîç Requesting existing producers...');
        socket.emit('getProducers');

        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å producers —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∑—Ä–∏—Ç–µ–ª—è–º –ø–æ–ª—É—á–∏—Ç—å producer'—ã –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        const timeoutId = setTimeout(() => {
            console.log('üîç Requesting producers again (delayed check)...');
            socket.emit('getProducers');
        }, 1000);

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—é—Å–µ—Ä–æ–≤
        const handleNewProducers = (producers: any[]) => {
            console.log('üì∫ Received producers:', producers.length);
            producers.forEach(async (producer: any) => {
                // –ù–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–∏ –ø–æ—Ç–æ–∫–∏
                if (producer.producer_socket_id === socket.id) return;
                // –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                if (consumersRef.current[producer.producer_id]) return;
                
                console.log('üé¨ Consuming producer:', producer.producer_id);
                // consume
                socket.emit('consume', {
                    consumerTransportId: consumerTransport.id,
                    producerId: producer.producer_id,
                    rtpCapabilities: device.rtpCapabilities,
                }, async (params: any) => {
                    if (params.error) {
                        console.log('‚ùå Consume error:', params.error);
                        return;
                    }
                    const consumer: Consumer = await consumerTransport.consume({
                        id: params.id,
                        producerId: params.producerId,
                        kind: params.kind,
                        rtpParameters: params.rtpParameters,
                    });
                    consumersRef.current[params.producerId] = consumer;
                    const stream = new MediaStream([consumer.track]);
                    setRemoteStreams(prev => ([...prev, { id: params.producerId, kind: params.kind, stream }]));
                    consumer.resume();
                    console.log('‚úÖ Consumer created and resumed:', params.producerId);
                });
            });
        };

        // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è producer —É –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        const handleProducerClosed = ({ producer_id, peer_id }: { producer_id: string, peer_id: string }) => {
            console.log('üî¥ Remote producer closed:', { producer_id, peer_id });
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º consumer –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const consumer = consumersRef.current[producer_id];
            if (consumer) {
                console.log('üóëÔ∏è Closing consumer:', producer_id);
                consumer.close();
                delete consumersRef.current[producer_id];
            }
            
            // –£–¥–∞–ª—è–µ–º stream –∏–∑ remote streams
            setRemoteStreams(prev => {
                const updated = prev.filter(stream => stream.id !== producer_id);
                console.log('üì∫ Updated remote streams count:', updated.length);
                return updated;
            });
        };

        socket.on('newProducers', handleNewProducers);
        socket.on('producerClosed', handleProducerClosed); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        return () => {
            socket.off('newProducers', handleNewProducers);
            socket.off('producerClosed', handleProducerClosed); // ‚úÖ –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            clearTimeout(timeoutId); // ‚úÖ –û—á–∏—â–∞–µ–º timeout
        };
    }, [state.transportsReady]);

    return {
        state,
        joinRoom,
        startMedia,
        stopMedia,
        device: deviceRef.current,
        socket: socketRef.current,
        producerTransport: producerTransportRef.current,
        consumerTransport: consumerTransportRef.current,
        remoteStreams,
        participants,
    };
} 